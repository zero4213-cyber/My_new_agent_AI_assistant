# core/voice.py - ch·ª©a c√°c h√†m li√™n quan ƒë·∫øn voice input/output

import logging
import sys
import os
import threading
import speech_recognition as sr
import pyttsx3
import platform # ƒê·ªÉ ki·ªÉm tra h·ªá ƒëi·ªÅu h√†nh t·ªët h∆°n

from core.utils.error_logger import learn_from_failure

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

engine = None
try:
    engine = pyttsx3.init()
    engine.setProperty("rate", 170) # T·ªëc ƒë·ªô n√≥i
    # T√πy ch·ªânh √¢m l∆∞·ª£ng (v√≠ d·ª•: 0.9 = 90%)
    # engine.setProperty("volume", 0.9) 

    # Ch·ªçn gi·ªçng n·ªØ n·∫øu c√≥
    voices = engine.getProperty("voices")
    female_voice = next((v for v in voices if "female" in v.name.lower() or "zira" in v.id.lower() or "vietnamese" in v.name.lower()), None)
    if female_voice:
        engine.setProperty("voice", female_voice.id)
        logging.info(f"ƒê√£ ch·ªçn gi·ªçng n√≥i: {female_voice.name}")
    else:
        logging.warning("Kh√¥ng t√¨m th·∫•y gi·ªçng n·ªØ. S·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh.")
except Exception as e:
    logging.error(f"L·ªói kh·ªüi t·∫°o pyttsx3 engine: {e}")
    learn_from_failure("pyttsx3_init", e)
    engine = None # ƒê·∫£m b·∫£o engine l√† None n·∫øu kh·ªüi t·∫°o th·∫•t b·∫°i

recognizer = sr.Recognizer()

def speak(text):
    """Ph√°t √¢m vƒÉn b·∫£n ra loa."""
    if not engine:
        logging.error("Engine ph√°t √¢m ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c b·ªã l·ªói.")
        print(f"AI: {text} (Kh√¥ng th·ªÉ ph√°t √¢m)")
        return

    print(f"AI: {text}")
    try:
        engine.say(text)
        engine.runAndWait()
    except Exception as e:
        logging.error(f"L·ªói khi ph√°t √¢m vƒÉn b·∫£n '{text[:50]}...': {e}")
        learn_from_failure("speak", e)

def listen():
    """L·∫Øng nghe gi·ªçng n√≥i t·ª´ microphone v√† chuy·ªÉn th√†nh vƒÉn b·∫£n."""
    with sr.Microphone() as source:
        print("üéß ƒêang l·∫Øng nghe... (Vui l√≤ng n√≥i r√µ r√†ng)")
        try:
            # ƒêi·ªÅu ch·ªânh ƒë·ªô nh·∫°y cho ti·∫øng ·ªìn xung quanh trong m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
            recognizer.adjust_for_ambient_noise(source, duration=0.5) 
            audio = recognizer.listen(source, timeout=7, phrase_time_limit=10) # TƒÉng timeout ƒë·ªÉ linh ho·∫°t h∆°n
        except sr.WaitTimeoutError:
            print("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c gi·ªçng n√≥i trong th·ªùi gian quy ƒë·ªãnh.")
            return ""
        except Exception as e:
            logging.error(f"L·ªói khi l·∫Øng nghe t·ª´ microphone: {e}")
            learn_from_failure("listen_microphone_error", e)
            return ""
            
    try:
        # S·ª≠ d·ª•ng Google Web Speech API cho ti·∫øng Vi·ªát
        transcript = recognizer.recognize_google(audio, language="vi-VN")
        print(f"B·∫°n: {transcript}")
        return transcript
    except sr.UnknownValueError:
        print("Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.")
        return ""
    except sr.RequestError as e:
        print(f"L·ªói k·∫øt n·ªëi v·ªõi d·ªãch v·ª• nh·∫≠n d·∫°ng gi·ªçng n√≥i; Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet c·ªßa b·∫°n: {e}")
        learn_from_failure("listen_request_error", e)
        return ""
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong listen(): {e}")
        learn_from_failure("listen_unknown_error", e)
        return ""