# core/chat.py - ph·∫£n h·ªìi th√¥ng minh d·ª±a v√†o √Ω ƒë·ªãnh ng∆∞·ªùi d√πng

# Ki·ªÉm tra l·∫°i c√°c ƒë∆∞·ªùng d·∫´n import n√†y cho ph√π h·ª£p v·ªõi c·∫•u tr√∫c project th·ª±c t·∫ø
# N·∫øu chat.py n·∫±m trong th∆∞ m·ª•c 'core', c√°c import n√†y c√≥ th·ªÉ l√†:
from models.init_models import chatbot
from models.intent_detection import detect_intent
from features.cyber_assistant import answer_cyber_question, list_top_vulnerabilities
from features.cve_lookup import search_cve
from tools.network_scanner import scan_open_ports
from tools.password_audit import check_password_strength
from features.security_learning import get_learning_resources
from security.device_protection import block_external_calls
from features.ip_tools import whois_lookup, ip_lookup

import re
import logging # Th√™m logging ƒë·ªÉ ghi l·∫°i l·ªói chi ti·∫øt h∆°n

def chat_response(text):
    """Ph·∫£n h·ªìi AI theo √Ω ƒë·ªãnh ƒë∆∞·ª£c ph√°t hi·ªán t·ª´ c√¢u h·ªèi ng∆∞·ªùi d√πng."""
    # Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n sang ch·ªØ th∆∞·ªùng ƒë·ªÉ chu·∫©n h√≥a ƒë·∫ßu v√†o cho detect_intent
    intent = detect_intent(text.lower())
    logging.info(f"Ph√°t hi·ªán √Ω ƒë·ªãnh: {intent} cho c√¢u h·ªèi: '{text}'")

    if intent == "tra_cve":
        return search_cve(text)

    if intent == "quet_cong":
        ip_match = re.search(r"\b(?:\d{1,3}\.){3}\d{1,3}\b", text)
        if ip_match:
            ip_address = ip_match.group()
            logging.info(f"ƒêang qu√©t c·ªïng cho IP: {ip_address}")
            try:
                # ƒê·∫£m b·∫£o scan_open_ports tr·∫£ v·ªÅ chu·ªói ho·∫∑c x·ª≠ l√Ω ph√π h·ª£p
                return f"üåê C·ªïng m·ªü: {scan_open_ports(ip_address)}"
            except Exception as e:
                logging.error(f"L·ªói khi qu√©t c·ªïng cho {ip_address}: {e}")
                return "‚ùå ƒê√£ x·∫£y ra l·ªói khi qu√©t c·ªïng."
        return "‚ùå Kh√¥ng ph√°t hi·ªán IP ƒë·ªÉ qu√©t. Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ IP."

    if intent == "mat_khau":
        # C·∫ßn m·ªôt c√°ch an to√†n h∆°n ƒë·ªÉ tr√≠ch xu·∫•t m·∫≠t kh·∫©u.
        # Hi·ªán t·∫°i, n√≥ l·∫•y t·∫•t c·∫£ sau d·∫•u ':' cu·ªëi c√πng.
        # C·∫ßn c√¢n nh·∫Øc b·∫£o m·∫≠t khi x·ª≠ l√Ω m·∫≠t kh·∫©u th·ª±c t·∫ø.
        parts = text.split(":")
        if len(parts) > 1:
            pwd = parts[-1].strip()
            if pwd:
                return check_password_strength(pwd)
            return "Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u ƒë·ªÉ ki·ªÉm tra."
        return "Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u ƒë·ªÉ ki·ªÉm tra (v√≠ d·ª•: 'ki·ªÉm tra m·∫≠t kh·∫©u: abcxyz')."


    if intent == "bao_mat":
        return answer_cyber_question(text)

    if intent == "tai_lieu":
        # C·∫£i thi·ªán c√°ch tr√≠ch xu·∫•t ch·ªß ƒë·ªÅ
        topic_keywords = ["t√†i li·ªáu v·ªÅ", "t√†i li·ªáu h·ªçc", "h·ªçc v·ªÅ"]
        topic = ""
        for kw in topic_keywords:
            if kw in text.lower():
                topic = text.lower().split(kw, 1)[1].strip()
                break
        
        if not topic:
            # Fallback n·∫øu kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a r√µ r√†ng
            topic = text.replace("t√†i li·ªáu", "").replace("h·ªçc", "").strip()

        if topic:
            logging.info(f"ƒêang t√¨m t√†i li·ªáu h·ªçc t·∫≠p cho ch·ªß ƒë·ªÅ: {topic}")
            resources = get_learning_resources(topic)
            if resources:
                return "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë t√†i li·ªáu h·ªçc t·∫≠p v·ªÅ " + topic + ":\n" + "\n".join(resources)
            return f"Kh√¥ng t√¨m th·∫•y t√†i li·ªáu h·ªçc t·∫≠p v·ªÅ '{topic}'."
        return "Vui l√≤ng cho t√¥i bi·∫øt b·∫°n mu·ªën t√¨m t√†i li·ªáu v·ªÅ ch·ªß ƒë·ªÅ g√¨."


    if intent == "kich_hoat_bao_ve":
        try:
            block_external_calls()
            return "‚úÖ ƒê√£ b·∫≠t b·∫£o v·ªá thi·∫øt b·ªã, ch·∫∑n m√£ ƒë·ªôc nguy hi·ªÉm."
        except Exception as e:
            logging.error(f"L·ªói khi k√≠ch ho·∫°t b·∫£o v·ªá thi·∫øt b·ªã: {e}")
            return "‚ùå ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng k√≠ch ho·∫°t b·∫£o v·ªá thi·∫øt b·ªã."

    if intent == "whois_ip":
        # C·∫£i thi·ªán logic tr√≠ch xu·∫•t IP/domain
        # ∆Øu ti√™n c√°c ƒë·ªãnh d·∫°ng IP ho·∫∑c domain ph·ªï bi·∫øn
        ip_or_domain = None
        # Ki·ªÉm tra IP tr∆∞·ªõc
        ip_match = re.search(r"\b(?:\d{1,3}\.){3}\d{1,3}\b", text)
        if ip_match:
            ip_or_domain = ip_match.group()
        else:
            # N·∫øu kh√¥ng ph·∫£i IP, th·ª≠ t√¨m domain
            # Regex n√†y ƒë∆°n gi·∫£n, c√≥ th·ªÉ c·∫ßn ph·ª©c t·∫°p h∆°n cho c√°c tr∆∞·ªùng h·ª£p edge
            domain_match = re.search(r"\b(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}\b", text.lower())
            if domain_match:
                ip_or_domain = domain_match.group()

        if ip_or_domain:
            logging.info(f"ƒêang th·ª±c hi·ªán tra c·ª©u WHOIS/IP cho: {ip_or_domain}")
            # X√°c ƒë·ªãnh ƒë√¢y l√† IP hay domain ƒë·ªÉ g·ªçi h√†m th√≠ch h·ª£p
            if re.match(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$", ip_or_domain):
                return ip_lookup(ip_or_domain)
            return whois_lookup(ip_or_domain)
        return "‚ùå Kh√¥ng t√¨m th·∫•y IP ho·∫∑c domain c·∫ßn tra c·ª©u. Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn h·ª£p l·ªá."

    # fallback
    try:
        # Gi·∫£ ƒë·ªãnh chatbot tr·∫£ v·ªÅ list of dict, v√† c·∫ßn l·∫•y 'generated_text'
        result = chatbot(text, max_length=100, do_sample=True)
        if result and len(result) > 0 and 'generated_text' in result[0]:
            return result[0]["generated_text"]
        logging.warning(f"Chatbot tr·∫£ v·ªÅ k·∫øt qu·∫£ kh√¥ng mong mu·ªën: {result}")
        return "ü§ñ T√¥i ch∆∞a th·ªÉ ph·∫£n h·ªìi ƒëi·ªÅu n√†y m·ªôt c√°ch ch√≠nh x√°c."
    except Exception as e:
        logging.error(f"L·ªói khi chatbot ph·∫£n h·ªìi: {e}")
        return "ü§ñ Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi ƒëi·ªÅu n√†y l√∫c n√†y do l·ªói h·ªá th·ªëng."