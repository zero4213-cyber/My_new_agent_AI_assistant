# main.py - ƒëi·ªÉm kh·ªüi ƒë·ªông tr·ª£ l√Ω AI ƒë∆°n gi·∫£n

# main.py - ƒëi·ªÉm kh·ªüi ƒë·ªông tr·ª£ l√Ω AI ƒë∆°n gi·∫£n

import threading
import time

from agent.voice import speak, listen
from agent.memory import add_to_memory
from agent.chat import chat_response as security_chat
from modules.chat_response import chat_response as general_chat
from hardware_manager import handle_hardware_command
from utils.helpers import detect_wake_command
from storage.history_manager import save_conversation
from utils.logger import log_chat, log_user_action
from utils.error_logger import learn_from_failure, log_error
from agent.translation import toggle_translation_mode, handle_traslation_request
from agent.summarize import summarize_lecture, suggest_review
from extensions.security_defense import protect_from_reverse_hack
from monitoring.system_monitor import monitor_system_resources
from monitoring.network_monitor import monitor_network_anomalies, monitor_outgoing_connections
from agent.research import smart_research, extract_web_text
from core.agent.multi_source_research import MultiSourceResearch
from core.agent.summarizer import Summarizer
from core.extensions.semantic_search import search_semantically  # TH√äM import n√†y

stop_event = threading.Event()
researcher = MultiSourceResearch()  # DI CHUY·ªÇN l√™n ƒë√¢y
summarizer = Summarizer()  # DI CHUY·ªÇN l√™n ƒë√¢y

def unified_chat(user_input: str):
    security_keywords = [
        "cve", "qu√©t c·ªïng", "scan", "m·∫≠t kh·∫©u", "password",
        "b·∫£o m·∫≠t", "firewall", "whois", "ip", "t√†i li·ªáu an ninh"
    ]
    general_keywords = [
        "d·ªãch", "translate", "tin t·ª©c", "news", "fake", "nghi√™n c·ª©u",
        "research", "thu·∫≠t to√°n", "algorithm", "code", "ph·∫ßn m·ªÅm"
    ]

    if any(kw in user_input.lower() for kw in security_keywords):
        return security_chat(user_input)
    elif any(kw in user_input.lower() for kw in general_keywords):
        return general_chat(user_input)
    else:
        # Fallback semantic search
        semantic_result = search_semantically(user_input)
        if semantic_result and semantic_result[0] != "‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ng·ªØ nghƒ©a ph√π h·ª£p.":
            return semantic_result[0]
        else:
            return "ü§î T√¥i ch∆∞a hi·ªÉu l·ªánh n√†y. B·∫°n c√≥ th·ªÉ th·ª≠:\n- C√¢u h·ªèi b·∫£o m·∫≠t (CVE, scan, firewall...)\n- C√¢u h·ªèi chung (d·ªãch, tin t·ª©c, research...)"

def respond_to_user_input(user_input: str):
    response = unified_chat(user_input)
    print("AI:", response)
    return response

def start_ai_assistant():
    """Kh·ªüi ƒë·ªông tr·ª£ l√Ω AI v√† x·ª≠ l√Ω c√°c t∆∞∆°ng t√°c ch√≠nh."""
    speak("Xin ch√†o, t√¥i l√† tr·ª£ l√Ω AI. B·∫°n c·∫ßn g√¨?")

    print("ƒêang k√≠ch ho·∫°t c√°c t√≠nh nƒÉng b·∫£o m·∫≠t ban ƒë·∫ßu...")
    initial_security_status = protect_from_reverse_hack()
    print(f"Tr·∫°ng th√°i b·∫£o m·∫≠t ban ƒë·∫ßu: {initial_security_status}")
    speak("C√°c h·ªá th·ªëng b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")

    while not stop_event.is_set():
        try:
            user_input = listen()
            if not user_input:
                continue
            print(f"üë§ B·∫°n: {user_input}")

            if detect_wake_command(user_input):
                speak("T√¥i ƒëang l·∫Øng nghe b·∫°n ƒë√¢y.")
                continue

            if "t·∫Øt ai" in user_input.lower() or "shutdown assistant" in user_input.lower():
                speak("T·∫°m ")
                stop_event.set()
                break
            
            response = respond_to_user_input(user_input)
            speak(response)
            save_conversation(user_input, response)
            add_to_memory(response)
        except KeyboardInterrupt:
            speak("ƒê∆∞·ª£c th√¥i. T√¥i ƒëang t·∫Øt c√°c h·ªá th·ªëng. T·∫°m bi·ªát!")
            stop_event.set()
            break
        except Exception as e:
            print(f"L·ªói trong v√≤ng l·∫∑p ch√≠nh c·ªßa AI: {e}")
            learn_from_failure("main_loop_error", e)
            speak("Xin l·ªói, t√¥i g·∫∑p m·ªôt v·∫•n ƒë·ªÅ. Vui l√≤ng th·ª≠ l·∫°i.")

def background_system_and_network_monitor():
    """Ch·ª©c nƒÉng gi√°m s√°t h·ªá th·ªëng v√† m·∫°ng ch·∫°y ng·∫ßm."""
    print("Kh·ªüi ƒë·ªông gi√°m s√°t t√†i nguy√™n h·ªá th·ªëng v√† m·∫°ng ng·∫ßm...")
    SYSTEM_MONITOR_INTERVAL = 300
    NETWORK_MONITOR_INTERVAL = 600

    last_system_check = time.time()
    last_network_check = time.time()

    while not stop_event.is_set():
        current_time = time.time()
        
        try:
            if current_time - last_system_check >= SYSTEM_MONITOR_INTERVAL:
                resources = monitor_system_resources()
                if resources:
                    if resources['cpu'] > 80:
                        speak("C·∫£nh b√°o: CPU ƒëang s·ª≠ d·ª•ng r·∫•t cao!")
                        log_user_action(f"CPU usage alert: {resources['cpu']}%")
                    if resources['ram'] > 80:
                        speak("C·∫£nh b√°o: RAM ƒëang s·ª≠ d·ª•ng r·∫•t cao!")
                        log_user_action(f"RAM usage alert: {resources['ram']}%")
                last_system_check = current_time

            if current_time - last_network_check >= NETWORK_MONITOR_INTERVAL:
                anomalies = monitor_network_anomalies()
                if anomalies:
                    speak("C·∫£nh b√°o: Ph√°t hi·ªán ho·∫°t ƒë·ªông m·∫°ng b·∫•t th∆∞·ªùng!")
                    log_user_action(f"Network anomaly alert: {anomalies}")
                    for anomaly in anomalies:
                        print(f"M·∫°ng b·∫•t th∆∞·ªùng: {anomaly}")
                last_network_check = current_time

            time.sleep(10)

        except Exception as e:
            print(f"L·ªói trong lu·ªìng gi√°m s√°t n·ªÅn: {e}")
            learn_from_failure("background_monitor_error", e)

    print("Gi√°m s√°t n·ªÅn ƒë√£ d·ª´ng.")
    
def background_research():
    """Ch·∫°y n·ªÅn ƒë·ªÉ l·∫•y th√¥ng tin quan tr·ªçng ƒë·ªãnh k·ª≥"""
    try:
        topics = ["CVE vulnerability", "stock market news", "AI safety news"]
        for topic in topics:
            results = researcher.gather(topic)
            if results:
                combined = " ".join(results)
                summary = summarizer.summarize(combined, max_len=100)
                print(f"‚ö†Ô∏è [C·∫¢NH B√ÅO N·ªÄN] Ch·ªß ƒë·ªÅ: {topic}\n{summary}\n")
        threading.Timer(1800, background_research).start()
    except Exception as e:
        log_error(f"Background research error: {e}")

if __name__ == "__main__":
    background_research()  # Kh·ªüi ch·∫°y research n·ªÅn
    ai_thread = threading.Thread(target=start_ai_assistant)
    ai_thread.start()

    monitor_thread = threading.Thread(target=background_system_and_network_monitor)
    monitor_thread.daemon = True
    monitor_thread.start()

    ai_thread.join()
    print("Ch∆∞∆°ng tr√¨nh ƒë√£ tho√°t.")